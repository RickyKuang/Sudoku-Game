package sudoku;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;

/**
 * Tester class for Sudoku Solver methods.
 * 
 * @author Ricky Kuang
 * @version 1.0
 */
class SudokuSolverTest {
	
	SudokuSolver solver;
	int[][] samplePuzzle = {
			{ 0, 0, 0, 6, 0, 0, 0, 0, 0 },
			{ 0, 0, 0, 0, 0, 0, 5, 0, 1 },
			{ 3, 6, 9, 0, 8, 0, 4, 0, 0 },
			  
			{ 0, 0, 0, 0, 0, 6, 8, 0, 0 },
			{ 0, 0, 0, 1, 3, 0, 0, 0, 9 },
			{ 4, 0, 5, 0, 0, 9, 0, 0, 0 },
			  
			{ 0, 0, 0, 0, 0, 0, 3, 0, 0 },
			{ 0, 0, 6, 0, 0, 7, 0, 0, 0 },
			{ 1, 0, 0, 3, 4, 0, 0, 0, 0 }
	};
	

	@Test
	void testSetPuzzleSquare() {
		int[][] test = {
				{ 0, 0, 0, 6, 0, 0, 0, 0, 0 },
				{ 0, 0, 0, 0, 0, 0, 5, 0, 1 },
				{ 3, 6, 9, 0, 8, 0, 4, 0, 0 },
				  
				{ 0, 0, 0, 0, 0, 6, 8, 0, 0 },
				{ 0, 0, 0, 1, 3, 0, 0, 0, 9 },
				{ 4, 0, 5, 0, 0, 9, 0, 0, 0 },
				  
				{ 0, 0, 0, 0, 0, 0, 3, 0, 0 },
				{ 0, 0, 6, 0, 0, 7, 0, 0, 0 },
				{ 1, 0, 0, 3, 4, 0, 0, 0, 0 }
		};
		
		int[][] result = {
				{ 5, 0, 0, 6, 0, 0, 0, 0, 0 },
				{ 0, 0, 0, 0, 0, 0, 5, 0, 1 },
				{ 3, 6, 9, 0, 8, 0, 4, 0, 0 },
				  
				{ 0, 0, 0, 0, 0, 6, 8, 0, 0 },
				{ 0, 0, 0, 1, 3, 0, 0, 0, 9 },
				{ 4, 0, 5, 0, 0, 9, 0, 0, 0 },
				  
				{ 0, 0, 0, 0, 0, 0, 3, 0, 0 },
				{ 0, 0, 6, 0, 0, 7, 0, 0, 0 },
				{ 1, 0, 0, 3, 4, 0, 0, 0, 0 }
		};
		
		solver = new SudokuSolver(test);
		solver.setPuzzleSquare(test, 0, 0, 5);
		assertArrayEquals(test, result);
	}
	
	@Test
	void testIsValidNumber() {
		int[][] test1 = {
				{ 3, 0, 0, 6, 0, 0, 0, 0, 0 },
				{ 0, 0, 0, 0, 0, 0, 5, 0, 1 },
				{ 3, 6, 9, 0, 8, 0, 4, 0, 0 },
				  
				{ 0, 0, 0, 0, 0, 6, 8, 0, 0 },
				{ 0, 0, 0, 1, 3, 0, 0, 0, 9 },
				{ 4, 0, 5, 0, 0, 9, 0, 0, 0 },
				  
				{ 0, 0, 0, 0, 0, 0, 3, 0, 0 },
				{ 0, 0, 6, 0, 0, 7, 0, 0, 0 },
				{ 1, 0, 0, 3, 4, 0, 0, 0, 0 }
		};
		
		solver = new SudokuSolver(test1);
		assertFalse(solver.isValidNumber(test1, 0, 0));
		
		int[][] test2 = {
				{ 0, 0, 0, 6, 0, 0, 0, 0, 6 },
				{ 0, 0, 0, 0, 0, 0, 5, 0, 1 },
				{ 3, 6, 9, 0, 8, 0, 4, 0, 0 },
				  
				{ 0, 0, 0, 0, 0, 6, 8, 0, 0 },
				{ 0, 0, 0, 1, 3, 0, 0, 0, 9 },
				{ 4, 0, 5, 0, 0, 9, 0, 0, 0 },
				  
				{ 0, 0, 0, 0, 0, 0, 3, 0, 0 },
				{ 0, 0, 6, 0, 0, 7, 0, 0, 0 },
				{ 1, 0, 0, 3, 4, 0, 0, 0, 0 }
		};
		
		solver = new SudokuSolver(test2);
		assertFalse(solver.isValidNumber(test2, 0, 8));
	}
	
	@Test
	void testCheckRow() {
		int[][] test1 = {
				{ 0, 0, 0, 6, 0, 0, 0, 0, 0 },
				{ 0, 0, 0, 0, 0, 0, 5, 0, 1 },
				{ 3, 6, 9, 0, 8, 0, 4, 0, 0 },
				  
				{ 0, 0, 0, 0, 0, 6, 8, 0, 0 },
				{ 0, 1, 0, 1, 3, 0, 0, 0, 9 },
				{ 4, 0, 5, 0, 0, 9, 0, 0, 0 },
				  
				{ 0, 0, 0, 0, 0, 0, 3, 0, 0 },
				{ 0, 0, 6, 0, 0, 7, 0, 0, 0 },
				{ 1, 0, 0, 3, 4, 0, 0, 0, 0 }
		};
		
		solver = new SudokuSolver(test1);
		assertFalse(solver.checkRow(test1, 4, 1));
		
		int[][] test2 = {
				{ 0, 0, 0, 6, 0, 0, 0, 0, 0 },
				{ 0, 0, 0, 0, 0, 0, 5, 0, 1 },
				{ 3, 6, 9, 0, 8, 0, 4, 0, 0 },
				  
				{ 0, 0, 0, 0, 0, 6, 8, 0, 0 },
				{ 0, 0, 0, 1, 3, 0, 0, 0, 9 },
				{ 4, 0, 5, 0, 0, 9, 0, 0, 0 },
				  
				{ 0, 0, 0, 0, 0, 0, 3, 0, 0 },
				{ 0, 0, 6, 7, 0, 7, 0, 0, 0 },
				{ 1, 0, 0, 3, 4, 0, 0, 0, 0 }
		};
		
		solver = new SudokuSolver(test2);
		assertFalse(solver.checkRow(test2, 7, 3));
	}
	
	@Test
	void testCheckColumn() {
		int[][] test1 = {
				{ 0, 0, 0, 6, 0, 0, 0, 0, 0 },
				{ 0, 0, 0, 0, 0, 0, 5, 0, 1 },
				{ 3, 6, 9, 0, 8, 0, 4, 0, 0 },
				  
				{ 0, 0, 0, 0, 0, 6, 8, 0, 0 },
				{ 0, 1, 0, 0, 3, 0, 0, 0, 9 },
				{ 4, 0, 5, 0, 0, 9, 0, 0, 0 },
				  
				{ 0, 0, 0, 0, 0, 0, 3, 0, 0 },
				{ 0, 0, 6, 0, 0, 7, 0, 0, 0 },
				{ 1, 6, 0, 3, 4, 0, 0, 0, 0 }
		};
		
		solver = new SudokuSolver(test1);
		assertFalse(solver.checkColumn(test1, 8, 1));
		
		int[][] test2 = {
				{ 4, 0, 0, 6, 0, 0, 0, 0, 0 },
				{ 0, 0, 0, 0, 0, 0, 5, 0, 1 },
				{ 3, 6, 9, 0, 8, 0, 4, 0, 0 },
				  
				{ 0, 0, 0, 0, 0, 6, 8, 0, 0 },
				{ 0, 0, 0, 1, 3, 0, 0, 0, 9 },
				{ 4, 0, 5, 0, 0, 9, 0, 0, 0 },
				  
				{ 0, 0, 0, 0, 0, 0, 3, 0, 0 },
				{ 0, 0, 6, 0, 0, 7, 0, 0, 0 },
				{ 1, 0, 0, 3, 4, 0, 0, 0, 0 }
		};
		
		solver = new SudokuSolver(test2);
		assertFalse(solver.checkColumn(test2, 0, 0));
	}
	
	@Test 
	void testCheckBox() {
		int[][] test1 = {
				{ 9, 0, 0, 6, 0, 0, 0, 0, 0 },
				{ 0, 0, 0, 0, 0, 0, 5, 0, 1 },
				{ 3, 6, 9, 0, 8, 0, 4, 0, 0 },
				  
				{ 0, 0, 0, 0, 0, 6, 8, 0, 0 },
				{ 0, 1, 0, 0, 3, 0, 0, 0, 9 },
				{ 4, 0, 5, 0, 0, 9, 0, 0, 0 },
				  
				{ 0, 0, 0, 0, 0, 0, 3, 0, 0 },
				{ 0, 0, 6, 0, 0, 7, 0, 0, 0 },
				{ 1, 0, 0, 3, 4, 0, 0, 0, 0 }
		};
		
		solver = new SudokuSolver(test1);
		assertFalse(solver.checkBox(test1, 0, 0));
		
		int[][] test2 = {
				{ 0, 0, 0, 6, 0, 0, 0, 0, 0 },
				{ 0, 0, 0, 0, 0, 0, 5, 0, 1 },
				{ 3, 6, 9, 0, 8, 0, 4, 0, 0 },
				  
				{ 0, 0, 0, 0, 0, 6, 8, 0, 0 },
				{ 0, 0, 0, 1, 3, 0, 0, 0, 9 },
				{ 4, 0, 5, 0, 0, 9, 0, 0, 0 },
				  
				{ 0, 0, 0, 0, 0, 0, 3, 0, 0 },
				{ 0, 0, 6, 0, 0, 7, 0, 0, 0 },
				{ 1, 0, 0, 3, 4, 0, 0, 3, 0 }
		};
		
		solver = new SudokuSolver(test2);
		assertFalse(solver.checkBox(test2, 8, 7));
	}
	
	@Test
	void testSolvePuzzle() {
		int[][] test = {
				  { 0, 0, 4, 0, 5, 0, 0, 0, 0 },
				  { 9, 0, 0, 7, 3, 4, 6, 0, 0 },
				  { 0, 0, 3, 0, 2, 1, 0, 4, 9 },
				  
				  { 0, 3, 5, 0, 9, 0, 4, 8, 0 },
				  { 0, 9, 0, 0, 0, 0, 0, 3, 0 },
				  { 0, 7, 6, 0, 1, 0, 9, 2, 0 },
				  
				  { 3, 1, 0, 9, 7, 0, 2, 0, 0 },
				  { 0, 0, 9, 1, 8, 2, 0, 0, 3 },
				  { 0, 0, 0, 0, 6, 0, 1, 0, 0 }
		};
		
		solver = new SudokuSolver(test);
		solver.solvePuzzle(test);
		
		int[][] solution = {
			{2, 6, 4, 8, 5, 9, 3, 1, 7},
			{9, 8, 1, 7, 3, 4, 6, 5, 2},
			{7, 5, 3, 6, 2, 1, 8, 4, 9},
			{1, 3, 5, 2, 9, 7, 4, 8, 6},
			{8, 9, 2, 5, 4, 6, 7, 3, 1},
			{4, 7, 6, 3, 1, 8, 9, 2, 5},
			{3, 1, 8, 9, 7, 5, 2, 6, 4},
			{6, 4, 9, 1, 8, 2, 5, 7, 3},
			{5, 2, 7, 4, 6, 3, 1, 9, 8}
		};
		
		assertTrue(solver.puzzleEquals(test, solution));
	}
}
